# file created by martin & devam 20/06/2024
# 
# The robot has four physical mono microphones, two on the front of its head
# and two on its back. In ALSA, these are represented by TWO subdevices.
#
# If you run `arecord -l`, you'll see that four subdevices are listed on Card 0.
#
# Deceivingly, these four subdevices are NOT the four mics!
# Subdevices 0,1 and 0,0 represent the front and back PAIRS of mics respectively.
# Subdevices 0,2 and 0,3 are, to our knowledge, always garbage data.
# 
# root@nemo:~# arecord -l
# **** List of CAPTURE Hardware Devices ****
# card 0: PCH [HDA Intel PCH], device 0: wm8860 [wm8860]
#   Subdevices: 4/4
#   Subdevice #0: subdevice #0       <--- back pair of mics
#   Subdevice #1: subdevice #1       <--- front pair of mics
#   Subdevice #2: subdevice #2       <--- garbage
#   Subdevice #3: subdevice #3       <--- garbage
# 
# This means that the mics are laid out like so:
# 
# Front Left    Front Right
#  hw:0,0,1      hw:0,0,1
#  channel 0     channel 1
#
# Back Left     Back Right
#  hw:0,0,0      hw:0,0,0
#  channel 0     channel 1
#
# This config file merges these four mics into one mono audio source
# called "mixed_mono", which can then be used for whistle detection
# (currently in whistle/whistle-detector.py).
#
# Read comments below to see how it does this.

# First, we use a type multi to combine the two devices 
# into one device with four channels...
pcm.all_mics_capture {
    type multi
    slaves {
        # take front pair as slave
        front { pcm "hw:0,0,1" channels 2 }
        # same with back
        back { pcm "hw:0,0,0" channels 2 }
    }
    bindings {
        0 { slave front channel 0 }     # front ch 0 all_mics_capture ch 0
        1 { slave front channel 1 }     # front ch 1 to all_mics_capture ch 1 
        2 { slave back channel 0 }      # etc...
        3 { slave back channel 1 }
    }
}
# Now all_mics_capture is a device which contains 4 channels: FL, FR, BL, BR.

# Now we use a type route to just merge all of the channels of all_mics_capture
# into one mono channel. Each channel from all_mics_capture can have a weight.
pcm.mixed_mono {
    type route
    # use all_mics_capture as a slave for this device
    slave { pcm "all_mics_capture" channels 4 }

    ttable {
        0.0 0.25    # Merge all_mics_capture channel 0 into output channel 0
                    # with contribution 0.25.
                    # 
                    # Format: out_channel.slave_channel contribution
                    #
                    # NOTE: contributions should add up to 1

        0.1 0.25    # same for these...
        0.2 0.25
        0.3 0.25
    }
}

